// Generated by CoffeeScript 1.9.3
(function() {
    var Rockets;
    var request = require('request');

    Rockets = (function() {
        
        function Rockets() {
            this.client = new Client();
        }

        Rockets.prototype.run = function() {
            this.initDB();
            this.client.connect();
            this.client.on('disconnect', (function(_this) {
                return function() {
                    return _this.client.reconnect();
                };
            })(this));
            this.setFilters();
            this.client.on('comment', (function(_this) {
                return function(comment) {
                    _this.save(comment);
                    _this.pingHub();
                    return _this.print(comment);
                };
            })(this));
            return this.client.on('post', (function(_this) {
                return function(post) {
                    _this.save(post);
                    _this.pingHub();
                    return _this.print(post);
                };
            })(this));
        };

        Rockets.prototype.reconnect = function() {
            this.client.close();    // the reconnect happens automatically through the disconnect-handler in run()
        };

        Rockets.prototype.pinging = false;
        Rockets.prototype.pingHub = function() {
            if (! this.pinging) {
                this.pinging = true;
                // trying to ping the hub every time rocket notifies us when no filters are set leads to a ECONNRESET. Once a minute is enough
                setTimeout((function(_this){
                    return function(){
                        _this.pinging = false;
                    };
                  }(this)), 60000);
                request.post(
                    'https://pubsubhubbub.superfeedr.com/',
                    {
                        form: {
                            'hub.mode': 'publish',
                            'hub.url': app.locals.helpers.baseUrl() + "/feed"
                        }
                    }
                );
            }
        }

        Rockets.prototype.setFilters = function() {
            this.client.on('connect', (function(_this) {
                return function() {
                    db.all("SELECT keyword FROM contains", function(err, rows) {
                        var keywords = [];
                        for (i=0; i<rows.length; i++) {
                            keywords.push(rows[i].keyword);
                        }
                        db.all("SELECT subreddit FROM subreddits", function(err, rows) {
                            var subreddits = [];
                            for (i=0; i<rows.length; i++) {
                                subreddits.push(rows[i].subreddit);
                            }
                            _this.client.subscribe('posts', {
                                    "subreddit": subreddits,
                                    "contains": keywords
                            });

                            return _this.client.subscribe('comments', {
                                    "subreddit": subreddits,
                                    "contains": keywords
                            });
                        });
                    });
                };
            })(this));
        }

        Rockets.prototype.initDB = function() {
            db.serialize(function() {
                db.run("CREATE TABLE IF NOT EXISTS models(id INTEGER PRIMARY KEY AUTOINCREMENT, \
                            text TEXT, \
                            subr TEXT, \
                            user TEXT, \
                            url TEXT, \
                            type TEXT, \
                            date INTEGER DEFAULT CURRENT_TIMESTAMP)");
                db.run("CREATE TABLE IF NOT EXISTS contains(id INTEGER PRIMARY KEY AUTOINCREMENT, \
                            keyword TEXT)");
                db.run("CREATE TABLE IF NOT EXISTS subreddits(id INTEGER PRIMARY KEY AUTOINCREMENT, \
                            subreddit TEXT)");
            });

        };

        Rockets.prototype.save = function (model) {
            var data = model.data;
            var subr, text, type, user, url;
            db.serialize(function() {
                var stmt = db.prepare("INSERT INTO models(text, subr, user, url, type) VALUES(?, ?, ?, ?, ?)");
                if (model.kind === 't1') {
                    type = 'Comment';
                    text = data.body;
                    subr = data.subreddit;
                    user = data.author;
                    url = "https://www.reddit.com/r/" + subr + "/comments/" + data['link_id'].substr(3) + "/_/" + data['id'];                
                } else  {
                    type = 'Post'
                    text = data.title;
                    user = data.author;
                    url = data.url
                    subr = data.subreddit ? data.subreddit : '(promoted)';
                }
                var entry = {text:text, subr: subr, user: user, url: url, type: type, date: Date.now()}
                wss.clients.forEach(function each(client) {
                    app.render("entry", {model: entry}, function(err, html) {
                            client.send(html);
                        }
                    );
                });
                stmt.run(text, subr, user, url, type);
                stmt.finalize();
            });
        };

        Rockets.prototype.print = function(model) {
            var data, length, subr, text, time, type, user;
            data = model.data;
            time = new Date(data.created_utc * 1000).toTimeString().split(' ')[0];
            if (model.kind === 't1') {
                type = 'Comment';
                text = data.body.replace(/\s/g, ' ');
                subr = data.subreddit;
                user = data.author;
                url = "reddit.com/r/" + subr + "/comments/" + data['link_id'].substr(3) + "/_/" + data['id'];
            } else {
                type = 'Post';
                text = data.title;
                user = data.author;
                url = data.url
                subr = data.subreddit ? data.subreddit : '(promoted)';
            }
            length = text.length
            user = 'u/' + user.blue.bold
            subr = 'r/' + subr.red.bold
            return console.log(("[" + time + "] ").grey + type + " by " + user + " in " + subr + ": " + url);
            };

        return Rockets;

    })();

    module.exports = new Rockets();

}).call(this);
